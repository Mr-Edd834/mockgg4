========================================
   BACKEND SETUP - FINAL STEPS
========================================

✅ Files copied successfully to: C:\Users\Macharia\Documents\GGbackend

Files created:
  ✓ controllers/authController.js
  ✓ models/User.js
  ✓ middleware/authMiddleware.js
  ✓ routes/authRoutes.js

========================================
   STEP 1: Install Dependencies
========================================

Open a terminal in your GGbackend folder and run:

    npm install bcryptjs jsonwebtoken mongoose


========================================
   STEP 2: Generate JWT Secret
========================================

Run this command to generate a secure JWT secret:

    node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"

Copy the output and use it in Step 3.


========================================
   STEP 3: Update .env File
========================================

Add these lines to your GGbackend/.env file:

    JWT_SECRET=<paste the secret from Step 2 here>
    FRONTEND_URL=http://localhost:3000

Example:
    JWT_SECRET=a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6
    FRONTEND_URL=http://localhost:3000


========================================
   STEP 4: Update server.js (or index.js/app.js)
========================================

Open your main server file and add these 2 lines:

A) At the top with other imports:

    const authRoutes = require('./routes/authRoutes');

B) After your middleware (app.use(cors()), app.use(express.json()), etc.):

    app.use('/auth', authRoutes);


Full example:
----------------
const express = require('express');
const cors = require('cors');
const authRoutes = require('./routes/authRoutes');  // <-- ADD THIS

const app = express();

app.use(cors());
app.use(express.json());

app.use('/auth', authRoutes);  // <-- ADD THIS

// Your other routes...
----------------


========================================
   STEP 5: Restart Your Backend
========================================

Stop your backend server (Ctrl+C) and restart it:

    npm start

or

    node server.js

or

    npm run dev


========================================
   STEP 6: Test the API
========================================

Test registration endpoint:

    curl -X POST http://localhost:5000/auth/register -H "Content-Type: application/json" -d "{\"email\":\"test@test.com\",\"password\":\"test123\",\"name\":\"Test User\"}"

If it returns a success response with a token, you're all set! ✅


========================================
   STEP 7: Test Frontend Login
========================================

1. Go back to your frontend (mockgg)
2. Start it: npm start
3. Try logging in with:
   Email: test@test.com
   Password: test123
4. Check "Remember me"
5. You should be redirected to home page!


========================================
   TROUBLESHOOTING
========================================

If you get errors:

❌ "Cannot find module './routes/authRoutes'"
   → Make sure the files were copied correctly
   → Check that controllers/, models/, middleware/, routes/ folders exist

❌ "JWT_SECRET is not defined"
   → Add JWT_SECRET to your .env file
   → Make sure you have require('dotenv').config() at the top of server.js

❌ MongoDB connection error
   → Make sure MongoDB is running
   → Check MONGODB_URI in your .env file

❌ CORS errors in frontend
   → Add FRONTEND_URL=http://localhost:3000 to backend .env
   → Make sure CORS is configured to allow your frontend URL


========================================
   YOU'RE DONE! 🎉
========================================

Your authentication system is now complete:
✅ Email/password login with backend API
✅ Passwords hashed and stored in MongoDB
✅ "Remember me" functionality
✅ JWT token authentication
✅ Protected routes

For more details, see QUICK_START.md in your mockgg folder.

